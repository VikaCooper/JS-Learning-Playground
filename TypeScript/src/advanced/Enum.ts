/**
 * 枚举
 *
 * 枚举（Enum）类型用于取值被限定在一定范围内的场景
 */

namespace Enum {
  /**
   * 自动递增1
   */
  // 枚举成员会被赋值为从 0 开始递增的数字，同时也会对枚举值到枚举名进行反向映射
  enum Days {
    Sun = 7,
    Mon = 0,
    Tue,
    Wed,
    Thu,
    Fri,
    Sat,
  }

  /**
   * 手动赋值
   */
  // 如果未手动赋值的枚举项与手动赋值的重复了，后面的值会覆盖前面的
  enum Numbers {
    a,
    b,
    c = 1,
    d = '3',
  }

  console.log(Days[0])
  console.log(Days.Mon)
  console.log(typeof Numbers.d)
  /**
   * 常数项和计算所得项
   */

  /**
   * 当满足以下条件时，枚举成员被当作是常数：
   *
   * 不具有初始化函数并且之前的枚举成员是常数。在这种情况下，当前枚举成员的值为上一个枚举成员的值加 1。但第一个枚举元素是个例外。如果它没有初始化方法，那么它的初始值为 0。
   * 枚举成员使用常数枚举表达式初始化。常数枚举表达式是 TypeScript 表达式的子集，它可以在编译阶段求值。当一个表达式满足下面条件之一时，它就是一个常数枚举表达式：
   * 数字字面量
   *    1. 引用之前定义的常数枚举成员（可以是在不同的枚举类型中定义的）如果这个成员是在同一个枚举类型中定义的，可以使用非限定名来引用
   *    2. 带括号的常数枚举表达式
   *    3. +, -, ~ 一元运算符应用于常数枚举表达式
   *    4. +, -, *, /, %, <<, >>, >>>, &, |, ^ 二元运算符，常数枚举表达式做为其一个操作对象。若常数枚举表达式求值后为 NaN 或 Infinity，则会在编译阶段报错
   */
  enum Color {
    Red,
    Green,
    Blue = 'blue'.length,
    // 在计算所得项后必须手动赋值，不然会因为无法获得初始值而报错
    Yellow = 3,
  }

  /**
   * 常数枚举
   *
   * 使用 const enum 定义的枚举类型
   */
  // 常数枚举与普通枚举的区别是，它会在编译阶段被删除，并且不能包含计算成员
  const enum Directions {
    Up,
    Down,
    Left,
    Right,
  } // var directions = [0 /* Up */, 1 /* Down */, 2 /* Left */, 3 /* Right */];

  /**
   * 外部枚举
   *
   * 使用 declare enum 定义的枚举类型
   */
  // declare 定义的类型只会用于编译时的检查，编译结果中会被删除
  declare enum Status {
    Fail,
    Success,
    Pending,
  }
}
